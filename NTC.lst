C51 COMPILER V9.60.0.0   NTC                                                               12/27/2023 11:38:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE NTC
OBJECT MODULE PLACED IN .\hex\NTC.obj
COMPILER INVOKED BY: C:\Keil_C51\C51\BIN\C51.EXE Source\NTC.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -NTC.lst) TABS(2) OBJECT(.\hex\NTC.obj)

line level    source

   1          /***************************************/
   2          /*   基于STC15W408AS的NTC温度计设计    */
   3          /*       测温范围-40°～110°          */
   4          /*       创建者 ：jmpxwh               */
   5          /*      创建时间：2017/05/05           */
   6          /*      请到https://oimin.com下载       */
   7          /***************************************/
   8          // 4位共阴极数码管段码a-h顺序接P27-P20，位选端接P3高4位
   9          // NTC使用MF52-103/3435;10K±1％精度;B值:3435±1％
  10          // NTC温度输出端子   接P1.7
  11          #include "main.h"
  12          
  13          #define ADC_POWER 0x80  // ADC电源控制位
  14          #define ADC_FLAG 0x10 // ADC完成标志位
  15          #define ADC_START 0x08  // ADC启动控制位
  16          #define ADC_SPEED0 0x00 // ADC转换速度，一次转换需要540个时钟
  17          #define ADC_SPEED1 0x20 // ADC转换速度，一次转换需要360个时钟
  18          #define ADC_SPEED2 0x40 // ADC转换速度，一次转换需要180个时钟
  19          #define ADC_SPEED3 0x60 // ADC转换速度，一次转换需要90个时钟
  20          
  21          /*************************************
  22          NTC阻值与温度关系表
  23          Vcc---NTC(±1％)---R(10K±1％)---GND
  24                  |
  25                  ADC端子
  26          NTC使用MF52-103/3435;10K±1％精度;B值:3435±1％
  27          **************************************/
  28          unsigned int code NTCcode[] = {
  29            /*ADC采样值****温度值*******电阻值**********/
  30            // 0x033, // -40.00   190.5562
  31            // 0x034, // -39.00   183.4132
  32            // 0x037, // -38.00   175.6740
  33            // 0x039, // -37.00   167.6467
  34            // 0x03c, // -36.00   159.5647
  35            // 0x03f, // -35.00   151.5975
  36            // 0x042, // -34.00   143.8624
  37            // 0x045, // -33.00   136.4361
  38            // 0x049, // -32.00   129.3641
  39            // 0x04d, // -31.00   122.6678
  40            // 0x050, // -30.00   116.3519
  41            // 0x054, // -29.00   110.4098
  42            // 0x059, // -28.00   104.8272
  43            // 0x05d, // -27.00   99.5847
  44            // 0x061, // -26.00   94.6608
  45            // 0x066, // -25.00   90.0326
  46            // 0x06a, // -24.00   85.6778
  47            // 0x06f, // -23.00   81.5747
  48            // 0x074, // -22.00   77.7031
  49            // 0x079, // -21.00   74.0442
  50            // 0x07e, // -20.00   70.5811
  51            // 0x084, // -19.00   67.2987
  52            // 0x089, // -18.00   64.1834
  53            // 0x08f, // -17.00   61.2233
  54            // 0x095, // -16.00   58.4080
C51 COMPILER V9.60.0.0   NTC                                                               12/27/2023 11:38:56 PAGE 2   

  55            // 0x09b, // -15.00   55.7284
  56            // 0x0a1, // -14.00   53.1766
  57            // 0x0a8, // -13.00   50.7456
  58            // 0x0af, // -12.00   48.4294
  59            // 0x0b5, // -11.00   46.2224
  60            // 0x0bd, // -10.00   44.1201
  61            // 0x0c4, // -9.00    42.1180
  62            // 0x0cb, // -8.00    40.2121
  63            // 0x0d3, // -7.00    38.3988
  64            // 0x0db, // -6.00    36.6746
  65            // 0x0e3, // -5.00    35.0362
  66            // 0x0eb, // -4.00    33.4802
  67            // 0x0f3, // -3.00    32.0035
  68            // 0x0fb, // -2.00    30.6028
  69            // 0x0104, // -1.00   29.2750
  70            0x010d, // 0.00   28.0170
  71            0x0115, // 1.00   26.8255
  72            0x011e, // 2.00   25.6972
  73            0x0127, // 3.00   24.6290
  74            0x0130, // 4.00   23.6176
  75            0x0139, // 5.00   22.6597
  76            0x0142, // 6.00   21.7522
  77            0x014b, // 7.00   20.8916
  78            0x0154, // 8.00   20.0749
  79            0x015d, // 9.00   19.2988
  80            0x0166, // 10.00    18.5600
  81            0x0167, // 11.00    18.4818
  82            0x016b, // 12.00    18.1489
  83            0x0172, // 13.00    17.6316
  84            0x017b, // 14.00    16.9917
  85            0x0185, // 15.00    16.2797
  86            0x0190, // 16.00    15.5350
  87            0x019c, // 17.00    14.7867
  88            0x01a9, // 18.00    14.0551
  89            0x01b6, // 19.00    13.3536
  90            0x01c2, // 20.00    12.6900
  91            0x01cf, // 21.00    12.0684
  92            0x01dc, // 22.00    11.4900
  93            0x01e8, // 23.00    10.9539
  94            0x01f4, // 24.00    10.4582
  95            0x01ff, // 25.00    10.0000
  96            0x020a, // 26.00    9.5762
  97            0x0215, // 27.00    9.1835
  98            0x021f, // 28.00    8.8186
  99            0x0229, // 29.00    8.4784
 100            0x0233, // 30.00    8.1600
 101            0x023c, // 31.00    7.8608
 102            0x0245, // 32.00    7.5785
 103            0x024e, // 33.00    7.3109
 104            0x0257, // 34.00    7.0564
 105            0x0260, // 35.00    6.8133
 106            0x0268, // 36.00    6.5806
 107            0x0271, // 37.00    6.3570
 108            0x0279, // 38.00    6.1418
 109            0x0282, // 39.00    5.9343
 110            0x028a, // 40.00    5.7340
 111            0x0292, // 41.00    5.5405
 112            0x029a, // 42.00    5.3534
 113            0x02a2, // 43.00    5.1725
 114            0x02aa, // 44.00    4.9976
 115            0x02b1, // 45.00    4.8286
 116            0x02b9, // 46.00    4.6652
C51 COMPILER V9.60.0.0   NTC                                                               12/27/2023 11:38:56 PAGE 3   

 117            0x02c1, // 47.00    4.5073
 118            0x02c8, // 48.00    4.3548
 119            0x02d0, // 49.00    4.2075
 120            0x02d7, // 50.00    4.0650
 121            0x02de, // 51.00    3.9271
 122            0x02e5, // 52.00    3.7936
 123            0x02ec, // 53.00    3.6639
 124            0x02f3, // 54.00    3.5377
 125            0x02fa, // 55.00    3.4146
 126            0x0301, // 56.00    3.2939
 127            0x0308, // 57.00    3.1752
 128            0x030f, // 58.00    3.0579
 129            0x0316, // 59.00    2.9414
 130            0x031d, // 60.00    2.8250
 131            0x0320, // 61.00    2.7762
 132            0x0324, // 62.00    2.7179
 133            0x0328, // 63.00    2.6523
 134            0x032d, // 64.00    2.5817
 135            0x0331, // 65.00    2.5076
 136            0x0336, // 66.00    2.4319
 137            0x033b, // 67.00    2.3557
 138            0x0341, // 68.00    2.2803
 139            0x0346, // 69.00    2.2065
 140            0x034b, // 70.00    2.1350
 141            0x034f, // 71.00    2.0661
 142            0x0354, // 72.00    2.0004
 143            0x0358, // 73.00    1.9378
 144            0x035d, // 74.00    1.8785
 145            0x0361, // 75.00    1.8225
 146            0x0365, // 76.00    1.7696
 147            0x0368, // 77.00    1.7197
 148            0x036c, // 78.00    1.6727
 149            0x036f, // 79.00    1.6282
 150            0x0372, // 80.00    1.5860
 151            // 0x0376, // 81.00   1.5458
 152            // 0x0378, // 82.00   1.5075
 153            // 0x037b, // 83.00   1.4707
 154            // 0x037e, // 84.00   1.4352
 155            // 0x0381, // 85.00   1.4006
 156            // 0x0383, // 86.00   1.3669
 157            // 0x0386, // 87.00   1.3337
 158            // 0x0389, // 88.00   1.3009
 159            // 0x038b, // 89.00   1.2684
 160            // 0x038e, // 90.00   1.2360
 161            // 0x0391, // 91.00   1.2037
 162            // 0x0393, // 92.00   1.1714
 163            // 0x0396, // 93.00   1.1390
 164            // 0x0399, // 94.00   1.1067
 165            // 0x039b, // 95.00   1.0744
 166            // 0x039e, // 96.00   1.0422
 167            // 0x03a1, // 97.00   1.0104
 168            // 0x03a3, // 98.00   0.9789
 169            // 0x03a6, // 99.00   0.9481
 170            // 0x03a8, // 100.00    0.9180
 171            // 0x03ab, // 101.00    0.8889
 172            // 0x03ad, // 102.00    0.8610
 173            // 0x03b0, // 103.00    0.8346
 174            // 0x03b2, // 104.00    0.8099
 175            // 0x03b4, // 105.00    0.7870
 176            // 0x03b6, // 106.00    0.7665
 177            // 0x03b7, // 107.00    0.7485
 178            // 0x03b9, // 108.00    0.7334
C51 COMPILER V9.60.0.0   NTC                                                               12/27/2023 11:38:56 PAGE 4   

 179            // 0x03ba, // 109.00    0.7214
 180            // 0x03ba // 110.00   0.7130
 181          };
 182          
 183          unsigned char ADCcount;   // 数码管显示计数变量，ADC采样次数变量
 184          /******************************
 185          函数说明：初始化ADC寄存器，设置P1.7为ADC输入功能
 186          入口参数：无
 187          出口参数：无
 188          ******************************/
 189          void Init_ADC(void)
 190          {
 191   1        P1ASF = 0x01; // 选择P1.0口的哪一口 这里的口和ch要对应才能达到选择该口
 192   1        //    P1ASF = 0x80;   //打开P1.7口的ADC功能
 193   1        ADC_RES = 0;
 194   1        ADC_RESL = 0;           // 清掉ADC转换结果寄存器
 195   1        ADC_CONTR = ADC_POWER | ADC_SPEED3; // 使能A/D供电，设置转换速度90T
 196   1        ADCcount = 0;           // ADC采样次数
 197   1      }
 198          
 199          /******************************
 200          函数说明：查询方式读取ADC转换结果
 201          入口参数：ch  ADC采样通道
 202          出口参数：int ADC_RES ADC转换结果
 203          ******************************/
 204          unsigned int Get_ADC_Result(unsigned char ch)
 205          {
 206   1        unsigned int result;
 207   1        ADC_RES = 0;
 208   1        ADC_RESL = 0;                    // 清掉ADC转换结果寄存器
 209   1        ADC_CONTR = ADC_POWER | ADC_SPEED3 | ch | ADC_START; // 配置ADC，设置转换通道，启动转换
 210   1        _nop_();
 211   1        _nop_();
 212   1        _nop_();
 213   1        _nop_(); // 等待设置ADC_POWER完毕
 214   1        while (!(ADC_CONTR & ADC_FLAG))
 215   1          ;               // 读取转换完毕标志位ADC_FLAG
 216   1        ADC_CONTR &= ~ADC_FLAG;       // 清除ADC_FLAG标志位
 217   1        result = ADC_RES << 2 | ADC_RESL; // 读取10位转换结果保存到result
 218   1        return result;            // 返回ADC转换结果10位
 219   1      }
 220          
 221          // #define FILTER_LENGTH 8 // 移动平均滤波器长度
 222          // // 移动平均滤波
 223          // uint16_t MovingAverageFilter(uint16_t newValue)
 224          // {
 225          //  static uint16_t values[FILTER_LENGTH];
 226          //  static uint8_t index = 0;
 227          //  static uint16_t sum = 0;
 228          
 229          //  // 从缓冲区中移除旧值
 230          //  sum -= values[index];
 231          //  // 将新值添加到缓冲区
 232          //  values[index] = newValue;
 233          //  sum += newValue;
 234          //  // 更新索引
 235          //  index = (index + 1) % FILTER_LENGTH;
 236          //  // 返回平均值
 237          //  return sum / FILTER_LENGTH;
 238          // }
 239          
 240          /******************************
C51 COMPILER V9.60.0.0   NTC                                                               12/27/2023 11:38:56 PAGE 5   

 241          函数说明：获取温度值
 242          入口参数：无
 243          出口参数：无
 244          ******************************/
 245          #define N 16  //ADC采样使用递推平均滤波算法，采样次数
 246          unsigned int  Temp_Buf[N+1];// 采样数组
 247          // u8 ntc_cnt;
 248          float Get_Temp(void)
 249          {
 250   1        float tempvalue;
 251   1        unsigned char xx;
 252   1        // uint16_t adcValue;
 253   1        // //*********************************************************
 254   1        // // if (ntc_cnt == 0)
 255   1        // // {
 256   1        // // ntc_cnt = 2; // 2*10ms 20ms 执行一次
 257   1        // // 读取ADC值
 258   1        // adcValue = Get_ADC_Result(0);
 259   1        // // printf("--->adcValue--->%d--\r\n",adcValue);
 260   1        // // 应用滤波
 261   1        // tempvalue = MovingAverageFilter(adcValue);
 262   1        // // }
 263   1      
 264   1        unsigned int sum;
 265   1        sum = tempvalue =0; 
 266   1        Temp_Buf[N]=Get_ADC_Result(0);  //将ADC转换结果放数组最高位
 267   1        if( ++ADCcount < 16)    //采样初期不使用滤波算法
 268   1        { 
 269   2          for(xx=0;xx<N;xx++) //准备滤波算法的数据
 270   2          {
 271   3            Temp_Buf[xx]=Temp_Buf[xx+1];//所有数据循环左移
 272   3          }
 273   2          tempvalue=Temp_Buf[N];//采样初期使用当前采样值
 274   2        }
 275   1        else  //只有采样次数大于8次以后才使用滤波算法 
 276   1        {
 277   2          ADCcount=16;  //采样次数超过8次后，固定设置为8
 278   2          for(xx=0;xx<N;xx++) //滤波算法
 279   2          {
 280   3            Temp_Buf[xx]=Temp_Buf[xx+1];//所有数据循环左移
 281   3            sum+=Temp_Buf[xx];  //求和
 282   3          }
 283   2          tempvalue=sum/N;    //求平均值    
 284   2        } 
 285   1        // printf("T: %d", tempvalue);
 286   1        //*********************************************************
 287   1        xx = 0;
 288   1        while (tempvalue > NTCcode[xx]) // 将当前温度值与温度表对比，得到所在位置
 289   1        {
 290   2          xx++;
 291   2        }
 292   1      
 293   1        tempvalue = xx * 10 + (tempvalue * 10 - NTCcode[xx - 1] * 10) / (NTCcode[xx] - NTCcode[xx - 1]);
 294   1        // 插值法计算温度，将数据全部扩大10倍，使小数变为整数
 295   1        // tempvalue=tempvalue-30;//修正温度，比正常高3.0度(扩大10倍为30)
 296   1      
 297   1        // if (tempvalue > 400) // 正温度(大于0度)
 298   1        // {
 299   1        //  tempvalue = tempvalue - 400; // 取得0°以上温度
 300   1        // }
 301   1        // else // 负温度(小于0度)
 302   1        // {
C51 COMPILER V9.60.0.0   NTC                                                               12/27/2023 11:38:56 PAGE 6   

 303   1        //  tempvalue = 410 - tempvalue; // 取得0°以下温度
 304   1        // }
 305   1        tempvalue /= 10;
 306   1        return tempvalue;
 307   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    609    ----
   CONSTANT SIZE    =    162    ----
   XDATA SIZE       =     35       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
